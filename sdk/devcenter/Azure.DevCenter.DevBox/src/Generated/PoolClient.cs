// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.DevCenter.DevBox
{
    /// <summary> The Pool service client. </summary>
    public partial class PoolClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://devcenter.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _tenantId;
        private readonly string _devCenter;
        private readonly string _devCenterDnsSuffix;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PoolClient for mocking. </summary>
        protected PoolClient()
        {
        }


        /// <summary> Initializes a new instance of PoolClient. </summary>
        /// <param name="tenantId"> The tenant to operate on. </param>
        /// <param name="devCenter"> The DevCenter to operate on. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/>, <paramref name="devCenter"/> or <paramref name="credential"/> is null. </exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "AZC0007:DO provide a minimal constructor that takes only the parameters required to connect to the service.", Justification = "False positive. This constructor is the minimal constructor with only required parameters.")]
        public PoolClient(string tenantId, string devCenter, TokenCredential credential) : this(tenantId, devCenter, credential, "devcenter.azure.com", new DevCenterClientOptions())
        {
        }


        /// <summary> Initializes a new instance of PoolClient. </summary>
        /// <param name="tenantId"> The tenant to operate on. </param>
        /// <param name="devCenter"> The DevCenter to operate on. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="devCenterDnsSuffix"> The DNS suffix used as the base for all devcenter requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantId"/>, <paramref name="devCenter"/>, <paramref name="credential"/> or <paramref name="devCenterDnsSuffix"/> is null. </exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "AZC0006:DO provide constructor overloads that allow specifying additional options.", Justification = "False positive. This is the overload constructor for additional options.")]
        public PoolClient(string tenantId, string devCenter, TokenCredential credential, string devCenterDnsSuffix, DevCenterClientOptions options)
        {
            Argument.AssertNotNull(tenantId, nameof(tenantId));
            Argument.AssertNotNull(devCenter, nameof(devCenter));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(devCenterDnsSuffix, nameof(devCenterDnsSuffix));
            options ??= new DevCenterClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _tenantId = tenantId;
            _devCenter = devCenter;
            _devCenterDnsSuffix = devCenterDnsSuffix;
            _apiVersion = options.Version;
        }

        /// <summary> Gets a pool. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPoolAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PoolClient("<tenantId>", "<devCenter>", credential);
        /// 
        /// Response response = await client.GetPoolAsync("<projectName>", "<poolName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetPoolAsync(string projectName, string poolName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(projectName, poolName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a pool. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPool with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PoolClient("<tenantId>", "<devCenter>", credential);
        /// 
        /// Response response = client.GetPool("<projectName>", "<poolName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("location").ToString());
        /// Console.WriteLine(result.GetProperty("osType").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        /// Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        /// Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        /// Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetPool(string projectName, string poolName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(projectName, poolName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists available pools. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPoolsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PoolClient("<tenantId>", "<devCenter>", credential);
        /// 
        /// await foreach (var data in client.GetPoolsAsync("<projectName>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPoolsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PoolClient("<tenantId>", "<devCenter>", credential);
        /// 
        /// await foreach (var data in client.GetPoolsAsync("<projectName>", 1234, "<filter>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("location").ToString());
        ///     Console.WriteLine(result.GetProperty("osType").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        ///     Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        ///     Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetPoolsAsync(string projectName, int? top = null, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));

            return GetPoolsImplementationAsync("PoolClient.GetPools", projectName, top, filter, context);
        }

        private AsyncPageable<BinaryData> GetPoolsImplementationAsync(string diagnosticsScopeName, string projectName, int? top, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPoolsRequest(projectName, top, filter, context)
                        : CreateGetPoolsNextPageRequest(nextLink, projectName, top, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists available pools. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="top"> The maximum number of resources to return from the operation. Example: &apos;top=10&apos;. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPools with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PoolClient("<tenantId>", "<devCenter>", credential);
        /// 
        /// foreach (var data in client.GetPools("<projectName>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPools with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PoolClient("<tenantId>", "<devCenter>", credential);
        /// 
        /// foreach (var data in client.GetPools("<projectName>", 1234, "<filter>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("location").ToString());
        ///     Console.WriteLine(result.GetProperty("osType").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
        ///     Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
        ///     Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
        ///     Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListResultValue</c>:
        /// <code>{
        ///   name: string, # Optional. Pool name
        ///   location: string, # Optional. Azure region where Dev Boxes in the pool are located
        ///   osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
        ///   hardwareProfile: {
        ///     skuName: string, # Optional. The name of the SKU
        ///     vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        ///     memoryGB: number, # Optional. The amount of memory available for the Dev Box.
        ///   }, # Optional. Hardware settings for the Dev Boxes created in this pool
        ///   storageProfile: {
        ///     osDisk: {
        ///       diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        ///     }, # Optional. Settings for the operating system disk.
        ///   }, # Optional. Storage settings for Dev Box created in this pool
        ///   imageReference: {
        ///     name: string, # Optional. The name of the image used.
        ///     version: string, # Optional. The version of the image.
        ///     operatingSystem: string, # Optional. The operating system of the image.
        ///     osBuildNumber: string, # Optional. The operating system build number of the image.
        ///     publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
        ///   }, # Optional. Image settings for Dev Boxes create in this pool
        ///   localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetPools(string projectName, int? top = null, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));

            return GetPoolsImplementation("PoolClient.GetPools", projectName, top, filter, context);
        }

        private Pageable<BinaryData> GetPoolsImplementation(string diagnosticsScopeName, string projectName, int? top, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPoolsRequest(projectName, top, filter, context)
                        : CreateGetPoolsNextPageRequest(nextLink, projectName, top, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetPoolsRequest(string projectName, int? top, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/pools", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolRequest(string projectName, string poolName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolsNextPageRequest(string nextLink, string projectName, int? top, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_tenantId, false);
            uri.AppendRaw("-", false);
            uri.AppendRaw(_devCenter, false);
            uri.AppendRaw(".", false);
            uri.AppendRaw(_devCenterDnsSuffix, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
